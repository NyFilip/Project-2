import numpy as np
import matplotlib.pyplot as plt
import filipFunction as fF
import nilsFunction as nF
from typing import Callable, Tuple, List
from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import matplotlib.patches as patches

def catdog_with_contamination(filePath='catdogdata.txt', contamination_rate=0.0):
    import numpy as np
    sLabels = []
    sImagesMatrix = []
    sImagesList = []
    full = []
    i = 0

    with open(filePath, 'r') as file:
        for line in file:
            parts = line.strip().split()
            index = parts[0].strip()
            pixels = list(map(int, parts[1:]))
            fullTemp = list(pixels)
            fullTemp.insert(0, 0 if i < 99 else 1)
            full.append(fullTemp)
            i += 1

    full = np.array(full)
    np.random.seed(10)
    np.random.shuffle(full)

    if contamination_rate > 0.0:
        n_pixels = 64 * 64
        n_contaminate = int(np.round(contamination_rate * n_pixels))
        contam_indices = np.random.choice(n_pixels, size=n_contaminate, replace=False)

        # Generate random values between 2 and 255
        random_values = np.random.randint(2, 256, size=n_contaminate)

        full[:, contam_indices + 1] = random_values
        # reshape images after contamination
    for line in full:
        slabel = line[0]
        spixels = line[1:]
        sLabels.append(slabel)
        sImagesList.append(spixels)
        sImagesMatrix.append(np.array(spixels).reshape(64, 64))

    sLabels = np.array(sLabels)
    sImagesList = np.array(sImagesList)
    sImagesMatrix = np.array(sImagesMatrix)

    return full, sLabels, sImagesMatrix, sImagesList

def mnist_with_contamination(filePath='Numbers.txt', contamination_rate=0.0):
    import numpy as np
    imagesList = []
    imagesMatrix = []
    labels = []
    full = []

    with open(filePath, 'r') as file:
        for line in file:
            parts = line.strip().split()
            index = parts[0].strip()
            label = np.array(int(parts[1]))
            fullTemp = np.array(list(map(float, parts[1:])))
            pixels = list(map(float, parts[2:]))
            pixelArray = np.array(pixels).reshape(16, 16)
            normArray = (pixelArray + 1) / 2  # now in [0, 1]
            labels.append(label)
            imagesMatrix.append(normArray)
            full.append(fullTemp)
            imagesList.append(np.array(normArray).reshape(1, 256))

    full = np.array(full)
    labels = np.array(labels)
    imagesMatrix = np.array(imagesMatrix)
    imagesList = np.array(imagesList)

    if contamination_rate > 0.0:
        n_pixels = 256
        n_contaminate = int(np.round(contamination_rate * n_pixels))
        contam_indices = np.random.choice(n_pixels, size=n_contaminate, replace=False)

        # Generate one random value per contaminated pixel (same across all images)
        random_values = np.random.uniform(0.0, 1.0, size=n_contaminate)

        full[:, contam_indices + 1] = random_values
        for i in range(len(imagesList)):
            imagesList[i][0, contam_indices] = random_values
            imagesMatrix[i].flat[contam_indices] = random_values

    return full, labels, np.array(imagesMatrix), np.array(imagesList)

from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import accuracy_score
import numpy as np
def show_example_images_per_contamination(
    dataset_loader,
    file_path,
    contamination_levels,
    title_prefix="Example (CatDog)"
):
    plt.figure(figsize=(4 * len(contamination_levels), 4))
    
    for i, level in enumerate(contamination_levels):
        _, labels, imagesMatrix, _ = dataset_loader(file_path, contamination_rate=level)
        idx = np.random.randint(0, len(imagesMatrix))
        img = imagesMatrix[idx]
        label = labels[idx]

        plt.subplot(1, len(contamination_levels), i + 1)
        plt.imshow(img, cmap='gray', vmin=0, vmax=255)
        plt.title(f"{title_prefix}\nNoise {level:.2f}, Label: {int(label)}", fontsize=10)
        plt.axis('off')
    
    plt.tight_layout()
    plt.show()

def evaluate_robustness_against_contamination(
    dataset_loader,  # e.g., catdog_with_contamination
    classifier_fn,   # e.g., nF.QDAClassifier
    file_path,       # path to dataset
    contamination_levels = [0.0, 0.01, 0.05, 0.1, 0.2],
    n_splits = 5
):
    """
    Evaluate classifier performance on increasing noise/contamination levels.

    Returns:
        List of (contamination_level, accuracy)
    """
    results = []

    for rate in contamination_levels:
        full, labels, _, imagesList = dataset_loader(file_path, contamination_rate=rate)

        data = np.hstack([labels.reshape(-1, 1), imagesList.reshape(len(labels), -1)])

        skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)
        acc_scores = []

        for train_idx, test_idx in skf.split(data[:, 1:], data[:, 0]):
            train_set = data[train_idx]
            test_set = data[test_idx]
            y_pred = classifier_fn(train_set, test_set)
            acc = accuracy_score(test_set[:, 0], y_pred)
            acc_scores.append(acc)

        avg_acc = np.mean(acc_scores)
        results.append((rate, avg_acc))

    return results

contamination_levels = [0.0, 0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95,0.96,0.98,0.99,1.0]
# Evaluate how QDA holds up to contamination on catdog data
robustness_results = evaluate_robustness_against_contamination(
    dataset_loader=catdog_with_contamination,
    classifier_fn=fF.KNearestNeighboors,
    file_path='catdogdata.txt',
    contamination_levels =contamination_levels,
    n_splits=5
)

for level, acc in robustness_results:
    print(f"Noise level: {level:.2f} â†’ Accuracy: {acc:.3f}")

def plot_robustness_curve(results, title="Accuracy vs. Contamination"):
    levels, accuracies = zip(*results)
    plt.figure(figsize=(6, 4))
    plt.plot(levels, accuracies, marker='o')
    plt.xlabel("Contamination level")
    plt.ylabel("Accuracy")
    plt.title(title)
    plt.grid(True)
    plt.tight_layout()
    plt.show()

plot_robustness_curve(robustness_results, title="Knearestneighbours on CatDog: Accuracy vs. Contamination")
'''show_example_images_per_contamination(
    dataset_loader=catdog_with_contamination,
    file_path='catdogdata.txt',
    contamination_levels=contamination_levels,
    title_prefix="CatDog"
)'''